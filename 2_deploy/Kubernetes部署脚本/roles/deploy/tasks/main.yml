#- name: 下载PKI工具
#  import_tasks: download.yml

- name: prepare some dirs
  file: name={{ item }} state=directory
  with_items:
  - "{{ base_dir }}/.cluster/ssl"
  - "{{ base_dir }}/.cluster/backup"

- name: 本地设置 bin 目录权限
  file: path={{ base_dir }}/bin state=directory mode=0755 recurse=yes

# 注册变量p，根据p的stat信息判断是否已经生成过ca证书，如果没有，下一步生成证书
# 如果已经有ca证书，为了保证整个安装的幂等性，跳过证书生成的步骤
- name: 读取ca证书stat信息
  stat: path="{{ base_dir }}/.cluster/ssl/ca.pem"
  register: p

#创建根证书CA，CA证书是集群所有节点共享的，只需创建一个CA证书，后续创建的所有证书都由它签名
- name: 准备CA配置文件和签名请求
  template: src={{ item }}.j2 dest={{ base_dir }}/.cluster/ssl/{{ item }}
  with_items:
  - "ca-config.json"  #创建配置文件
  - "ca-csr.json"     #创建证书签名请求文件
  when: p.stat.isreg is not defined

- name: 生成 CA 证书和私钥
  when: p.stat.isreg is not defined
  shell: "cd {{ base_dir }}/.cluster/ssl && \
	 {{ base_dir }}/bin/cfssl gencert -initca ca-csr.json | {{ base_dir }}/bin/cfssljson -bare ca" 

#----------- 创建kubectl kubeconfig文件: /root/.kube/config
- block:
    - name: 删除原有kubeconfig
      file: path=/root/.kube/config state=absent
      ignore_errors: true
    
    - name: 下载 group:read rbac 文件
      copy: src=read-group-rbac.yaml dest=/tmp/read-group-rbac.yaml
      when: USER_NAME == "read"
    
    - name: 创建group:read rbac 绑定
      shell: "{{ base_dir }}/bin/kubectl apply -f /tmp/read-group-rbac.yaml"
      when: USER_NAME == "read"
    
    - name: 准备kubectl使用的{{ USER_NAME }}证书签名请求
      template: src={{ USER_NAME }}-csr.json.j2 dest={{ base_dir }}/.cluster/ssl/{{ USER_NAME }}-csr.json
    
#创建admin证书和私钥
#kubectl与apiserver https安全端口通信，apiserver 对提供的证书进行认证和授权。
#kubectl作为集群的管理工具，需要被授予最高权限，这里创建具有最高权限的 admin 证书
    - name: 创建{{ USER_NAME }}证书与私钥
      shell: "cd {{ base_dir }}/.cluster/ssl && {{ base_dir }}/bin/cfssl gencert \
            -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes {{ USER_NAME }}-csr.json | {{ base_dir }}/bin/cfssljson -bare {{ USER_NAME }}"
    
#创建kubeconfig文件
#kubeconfig 为 kubectl 的配置文件，包含访问 apiserver 的所有信息，如 apiserver 地址、CA 证书和自身使用的证书
    - name: 设置集群参数
      shell: "{{ base_dir }}/bin/kubectl config set-cluster {{ CLUSTER_NAME }} \
            --certificate-authority={{ base_dir }}/.cluster/ssl/ca.pem \
            --embed-certs=true \
            --server={{ KUBE_APISERVER }}"
    
    - name: 设置客户端认证参数
      shell: "{{ base_dir }}/bin/kubectl config set-credentials {{ USER_NAME }} \
            --client-certificate={{ base_dir }}/.cluster/ssl/{{ USER_NAME }}.pem \
            --embed-certs=true \
            --client-key={{ base_dir }}/.cluster/ssl/{{ USER_NAME }}-key.pem"
    
    - name: 设置上下文参数
      shell: "{{ base_dir }}/bin/kubectl config set-context {{ CONTEXT_NAME }} \
            --cluster={{ CLUSTER_NAME }} --user={{ USER_NAME }}"
    
    - name: 选择默认上下文
      shell: "{{ base_dir }}/bin/kubectl config use-context {{ CONTEXT_NAME }}"
  tags: create_kctl_cfg

#------------创建kube-proxy配置文件: kube-proxy.kubeconfig
- name: 准备kube-proxy 证书签名请求
  template: src=kube-proxy-csr.json.j2 dest={{ base_dir }}/.cluster/ssl/kube-proxy-csr.json

- name: 创建 kube-proxy证书与私钥
  shell: "cd {{ base_dir }}/.cluster/ssl && {{ base_dir }}/bin/cfssl gencert \
        -ca=ca.pem \
        -ca-key=ca-key.pem \
        -config=ca-config.json \
        -profile=kubernetes kube-proxy-csr.json | {{ base_dir }}/bin/cfssljson -bare kube-proxy"

#--certificate-authority：验证 kube-apiserver 证书的根证书；
#--client-certificate、--client-key：刚生成的 admin 证书和私钥，连接 kube-apiserver 时使用；
#--embed-certs=true：将 ca.pem 和 admin.pem 证书内容嵌入到生成的 kubectl.kubeconfig 文件中(不加时，写入的是证书文件路径，
- name: 设置集群参数
  shell: "{{ base_dir }}/bin/kubectl config set-cluster {{ CLUSTER_NAME }} \
        --certificate-authority={{ base_dir }}/.cluster/ssl/ca.pem \
        --embed-certs=true \
        --server={{ KUBE_APISERVER }} \
        --kubeconfig={{ base_dir }}/.cluster/kube-proxy.kubeconfig"
- name: 设置客户端认证参数
  shell: "{{ base_dir }}/bin/kubectl config set-credentials kube-proxy \
        --client-certificate={{ base_dir }}/.cluster/ssl/kube-proxy.pem \
        --client-key={{ base_dir }}/.cluster/ssl/kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig={{ base_dir }}/.cluster/kube-proxy.kubeconfig"
- name: 设置上下文参数
  shell: "{{ base_dir }}/bin/kubectl config set-context default \
        --cluster=kubernetes \
        --user=kube-proxy \
        --kubeconfig={{ base_dir }}/.cluster/kube-proxy.kubeconfig"
- name: 选择默认上下文
  shell: "{{ base_dir }}/bin/kubectl config use-context default \
	--kubeconfig={{ base_dir }}/.cluster/kube-proxy.kubeconfig"

# ansible 控制端一些易用性配置
- name: ansible 控制端写入环境变量$PATH
  lineinfile:
    path: ~/.bashrc
    line: 'export PATH={{ bin_dir }}/:$PATH'
  ignore_errors: true

- name: ansible 控制端添加 kubectl 自动补全
  lineinfile:
    dest: ~/.bashrc
    state: present
    regexp: 'kubectl completion'
    line: 'source <(kubectl completion bash)'
  ignore_errors: true

- name: ansible 控制端创建 kubectl 软链接
  file: src={{ base_dir }}/bin/kubectl dest=/usr/bin/kubectl state=link
  ignore_errors: true
