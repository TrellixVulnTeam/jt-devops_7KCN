pipeline {
    agent any
    environment{
        HARBOR_PREFIX="harbor.zhkj.com/jtb"
        LIB_DIR="/opt/build/platform"
        COMM_DIR="/data/jtb/infra/git"
    }
    options {
        timestamps()
        // buildDiscarder(logRotator(numToKeepStr: '5'))   
        disableConcurrentBuilds()
    }
    stages {
        stage('代码获取'){
            steps{
                checkout([$class: 'GitSCM', branches: [[name: '${tag}']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'a6548da5-8510-4629-9a07-aafc309d1b86', url: 'http://git.zanclick.cn/jtb/jtb-platform/jt-platform.git']]])
            }
        }
        stage('检测发布服务名称'){
            steps{
                sh  '''
                if [[ ${SVC_NAME} = None ]];then
                    echo ${SVC_NAME}
                    err "[ERROR] 必须通过Jt-platform代码质量分析项目来触发构建发布此项目"
                fi'''
            }
        }
        stage('是否编译core包)') {
            steps {
                println "${IF_RUN}"
            }
        }
        stage('基础依赖服务打包'){
            steps{
                script {
                    if ( params.IF_RUN == 'yes' ) {
                        println "[INFO]开始编译jt-commons和jt-platform-core项目..."
                        dir("${COMM_DIR}/jt-commons"){
                            sh '''git pull http://git.zanclick.cn/jtb/jtb-core/jt-commons.git
                            mvn clean &&  mvn install   -Dmaven.test.skip=true'''
                            println "[INFO]jt-commons编译完成...,准备编译jt-platform-core项目"
                        }    
                        dir("${COMM_DIR}/jt-platform-core"){
                            sh '''git pull http://git.zanclick.cn/jtb/jtb-core/jt-platform-core.git
                            mvn clean && mvn install'''
                            println "[INFO]jt-platform-core编译完成"
                        }
                    } else {
                        println "[WARN]跳过编译jt-commons和jt-platform-core项目..."
                    }
                }
            }
        }
        stage('发布服务打包'){
            steps{
                sh  '''
                    is_provider=$(echo "${SVC_NAME}"|sed -n \'/^provider-.*/p\')
                    is_endpoint=$(echo "${SVC_NAME}"|sed -n \'/^endpoint-.*/p\')
                    cd platform-endpoint/
                    mvn clean && mvn install
                    cd ../platform-commons/
                    mvn clean && mvn install
                    cd ../platform-core/
                    mvn clean && mvn install
                    cd ../platform-endpoint/platform-endpoint-contract/
                    mvn clean && mvn install
                    cd ../../
                    if [[ ${is_provider} ]];then
                        cd platform-provider/
                    fi
                    if [[ ${is_endpoint} ]];then
                        cd platform-endpoint/
                    fi
                    pwd
                    cd platform-${SVC_NAME}
                    mvn clean && mvn install   -Dmaven.test.skip=true
                    version=`awk \'/<version>[^<]+<\\/version>/{gsub(/<version>|<\\/version>/,"",$1);print $1;exit;}\' pom.xml`
                    cp -f target/platform-${SVC_NAME}-${version}.jar ${LIB_DIR}/lib/'''
            }
        }
        stage('构建镜像'){
            steps{
                sh  '''
                    version=`awk \'/<version>[^<]+<\\/version>/{gsub(/<version>|<\\/version>/,"",$1);print $1;exit;}\' pom.xml`
                    current_version=$(grep -w image  ${LIB_DIR}/conf/jt-platform-${SVC_NAME}.yml |awk -F: \'{print $NF}\')
                    PORT=$(awk "/${SVC_NAME}/{print $NF}" /data/jtb/bin/platform_port.log|awk \'{print $2}\')
                    cd ${LIB_DIR}/lib
                    ../bin/build_docker_image.sh  ${SVC_NAME} ${version} ${PORT} && \\
                    docker tag jt-platform-${SVC_NAME}:${version} ${HARBOR_PREFIX}/jt-platform-${SVC_NAME}:${version} && \\
                    docker push ${HARBOR_PREFIX}/jt-platform-${SVC_NAME}:${version}'''
            }
        }
        stage('清除镜像'){
            steps{
                sh '''
                    version=`awk \'/<version>[^<]+<\\/version>/{gsub(/<version>|<\\/version>/,"",$1);print $1;exit;}\' pom.xml`
                    docker rmi jt-platform-${SVC_NAME}:${version}
                    docker rmi ${HARBOR_PREFIX}/jt-platform-${SVC_NAME}:${version}
                '''
            }
        }
        stage('服务发布'){
            steps{
                sh  '''
                    version=`awk \'/<version>[^<]+<\\/version>/{gsub(/<version>|<\\/version>/,"",$1);print $1;exit;}\' pom.xml`
                    current_version=$(grep -w image  ${LIB_DIR}/conf/jt-platform-${SVC_NAME}.yml |awk -F: \'{print $NF}\')
                    cd ${LIB_DIR}/lib
                    if [ $version = ${current_version} ];then
                        echo "equal.."
                        kubectl delete -f ../conf/jt-platform-${SVC_NAME}.yml
                        kubectl apply -f ../conf/jt-platform-${SVC_NAME}.yml --record
                    else    
                        echo "not equal.."
                        sed -i "s;${current_version};${version};"    ${LIB_DIR}/conf/jt-platform-${SVC_NAME}.yml  && \\
                        kubectl apply -f  ../conf/jt-platform-${SVC_NAME}.yml --record
                    fi'''
            }     
        }
    }
}